--Turbo Utilities Library (c) Златовратский Павел(ТБ.Бюджет), 2016
--Основано на модуле json из Стандартной Библиотеки Python (c) Python Software Foundation

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class "JSON read/write";

inclass
  proc AddInArray(var Array:Variant[]; Item:Variant);
  var l:Integer;
      l=LengthOfArray(Array);
      Array[l+1]=Item;
  end; 

  var digits:String[]=["1","2","3","4","5","6","7","8","9","0"];
  var whitespaces:String=" "+chr(10)+chr(13)+chr(9);

  func _decode_uXXXX(s: String; pos: Integer): Integer;
  var esc: String;
    var tmpSt: Storage;
    tmpSt = Storage.Create; -- на самом деле сойдет любой объект

    esc = Substr(s, pos + 1, 4);
    if length(esc) = 4 and not (Substr(esc,1,1) = 'x' or Substr(esc,1,1) = 'X'):
        try
            return tmpSt.Evaluate("0x"+esc) as Integer;
        except
            esc = esc;
        end;
    fi;
    SetError(9910, "Некорректная unicode-последовательность");
    return 0;
  end;

  func backslash(slashed:String):String;
    if slashed = '"' then
       return '"';
    elsif slashed = '\' then
       return "\";
    elsif slashed = '/' then
       return "/";
    elsif slashed = 'f' then
       return chr(12);
    elsif slashed = 'n' then
       return chr(10);
    elsif slashed = 'r' then
       return chr(13);
    elsif slashed = 'b' then
       return chr(08);
    elsif slashed = 't' then
       return chr(09);
    else
      SetError(9903, "Некорректная управляющая последовательность "+slashed);
    end;
  end;

  func parse_string(s: String;
                    end_: Integer;
                    encoding: String='utf-8';
                    strict: Logical=True): Variant[];
   --  Scan the string s for a JSON string. End is the index of the
   -- character in s after the quote that started the JSON string.
   -- Unescapes all valid JSON string escape sequences and raises ValueError
   -- on attempt to decode an invalid string. If strict is False then literal
   -- control characters are allowed in the string.

   -- Returns a tuple of the decoded string and the index of the character in s
   -- after the end quote."""
    var res: String;
    var esc, char: String;
    var uni: Integer;
    var content, terminator: String;

    var cut_pos: Integer;
    --begin = end_ - 1;
    while true do
        cut_pos = end_;
        end_ = CharPos('"\', s, end_);
        if end_ < 1:
           SetError(9901, "Невозможно распаковать JSON-значение");
        fi;
        content = Substr(s, cut_pos, end_ - cut_pos );
        terminator = Substr(s,end_,1);
        -- Content is contains zero or more unescaped string characters
        if content <> "":
            res = res + content;
        fi;
        -- Terminator is the end of string, a literal control character,
        -- or a backslash denoting that an escape sequence follows
        if terminator = '"':
            break;
        elsif terminator = '\':
          end_ = end_ + 1;
          esc = Substr(s, end_, 1);
          if esc = "" then
             SetError(9905, "Нетерминированная строка");
          end;
          -- If not a unicode escape sequence, must be in the lookup table
          if esc <> 'u':
             char = backslash(esc);
             end_ = end_ + 1;
          else
              -- Unicode escape sequence
              uni = _decode_uXXXX(s, end_);
              end_ = end_ + 5;
--              -- Check for surrogate pair on UCS-4 systems
--              if sys.maxunicode > 65535 and \
--                 0xd800 <= uni <= 0xdbff and s[end:end + 2] == '\\u':
--                  uni2 = _decode_uXXXX(s, end + 1)
--                  if 0xdc00 <= uni2 <= 0xdfff:
--                      uni = 0x10000 + (((uni - 0xd800) << 10) | (uni2 - 0xdc00))
--                      end += 6
              char = chr(uni); --Вообще-то тут должен быть юникод, это эпик-подпорка, но да...
          fi;

        else
            if strict:
              SetError(9903, "Некорректная управляющая последовательность "+terminator);
--            else:
--                res = res + terminator;
--                Continue;
            fi;
        fi;
        -- Append the unescaped character
        res = res + char;
    od;
    return [res, end_ + 1];
  end;

  func parse_object(s: String;
                    end_: Integer;
                    encoding:String='utf-8';
                    strict:Logical=True): Variant[];
    --var pairs: Variant[2];
    var nextchar: string;
    var key: String;
    var value: Variant;
    var pair: Variant[];
    var res: Storage;
    res = Storage.Create;
    nextchar = Substr(s, end_, 1);
    -- Normally we expect nextchar == '"'
    if nextchar <> '"':
        if trim(nextchar) = '':
            end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_ + 1;
            nextchar = Substr(s, end_, 1);
        fi;
        -- Trivial empty object
        if nextchar = '}':
            return [res, end_ + 1];
        elsif nextchar <> '"':
            SetError(9915, "Expecting property name enclosed in double quotes" + s);
        fi;
    fi;
    end_ = end_ + 1;
    while True do
        pair = parse_string(s, end_, encoding, strict);
        key = pair[1];
        end_ = pair[2];
        -- To skip some function call overhead we optimize the fast paths where
        -- the JSON key separator is ": " or just ":".
        if Substr(s, end_, 1) <> ':':
            end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_+1;
            if Substr(s, end_, 1) <> ':':
                SetError(9916, "Expecting ':' delimiter" + Substr(s, end_ - 2, 10));
            fi;
        fi;
        end_ = end_ + 1;

        if trim(Substr(s, end_, 1)) = '':
           end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_+1;
        fi;

        pair = scan(s, end_);
        value = pair[1];
        end_ = pair[2];
        if Lo(key) in ["count", "items"] then
          key = "_" + key;
        end;
        res.SetField(key, value);

        nextchar = Substr(s, end_, 1);
        if trim(nextchar) = '':
            end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_ + 1;
            nextchar = Substr(s, end_, 1);
        fi;
        end_ = end_ + 1;

        if nextchar = '}':
            break;
        elsif nextchar <> ',':
            SetError(9918, "Expecting ',' delimiter" +  Substr(s, end_ - 2, 10));
        fi;

        nextchar = Substr(s, end_, 1);
        if trim(nextchar) = '':
            end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_ + 1;
            nextchar = Substr(s, end_, 1);
        fi;
        end_ = end_ + 1;

        if nextchar <> '"':
           SetError(9918, "Expecting '"+'"'+"' delimiter" +  Substr(s, end_ - 2, 10));
        fi;
    od;
    return [res, end_];
  end;

  func parse_array(s: String;
                   end_:Integer):Variant[];
  var values: Variant[];
  var value: Variant;
  var pair: Variant[];
  var nextchar: String;
  var res_ :variant[];

    values = [];
    nextchar = Substr(s, end_, 1);
    if trim(nextchar) = '':
        end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_ + 1;
        nextchar = Substr(s, end_, 1);
    fi;
    -- Look-ahead for trivial empty array
    if nextchar = ']':
        return [values, end_ + 1];
    fi;
    while True do
        pair = scan(s, end_);
        value = pair[1];
        end_ = pair[2];
        AddInArray(values, value);
        nextchar = Substr(s, end_, 1);
        if trim(nextchar) = '':
            end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_ + 1;
            nextchar = Substr(s, end_, 1);
        fi;
        end_ = end_ + 1;
        if nextchar = ']':
            break;
        elsif nextchar <> ',':
            SetError(9918, "Expecting ',' delimiter" +  Substr(s, end_ - 2, 10));
        fi;
        if trim(Substr(s, end_, 1)) = '':
           end_ = CharPos(whitespaces, Substr(s, end_ + 1, Length(s))) + end_+1;
        fi;
    od;
    res_[1] = values;
    res_[2] = end_;
    return res_;
  end;

  func parse_number(s: String;
                    end_:Integer):Variant[];
    var int_: String;
    var frac_: String;
    var exp_: String;
    var res_: Variant[];

    while Substr(s, end_, 1) in digits do
      int_ = int_ + Substr(s, end_, 1);
      end_ = end_ + 1;
    end;
    if Substr(s, end_, 1) = '.' then
      while Substr(s, end_, 1) in digits do
        frac_ = frac_ + Substr(s, end_, 1);
        end_ = end_ + 1;
      end;
    end;
    if frac_ = '' then
       frac_ = '0';
    end;
    if Substr(s, end_, 1) in ['e', 'E'] then
      while Substr(s, end_, 1) in digits do
        exp_ = exp_ + Substr(s, end_, 1);
        end_ = end_ + 1;
      end;
    end;
    if exp_ = '' then
       exp_ = '0';
    end;

    res_[1] = Num(int_+"."+frac_) * Power(10,int(exp_));
    res_[2] = end_;
    return res_;
  end;


  func scan(JSON:string; idx:integer=1):Variant[];
    var nextchar:String;

    nextchar = Substr(JSON, idx, 1);
    if nextchar = '' then
      SetError(9901,"Невозможно распаковать JSON-значение");
     elsif nextchar = '"':
       return parse_string(JSON, idx + 1);
     elsif nextchar = '{':
       return parse_object(JSON, idx + 1);
     elsif nextchar = 'n' and Substr(JSON, idx, 4) = 'null':
       return [Nil, idx + 4]; --?? None
     elsif nextchar = 't' and Substr(JSON, idx, 4) = 'true':
       return [True, idx + 4];
     elsif nextchar = 'f' and Substr(JSON, idx, 5) = 'false':
       return [False, idx + 5];
     elsif nextchar = '[':
       return parse_array(JSON, idx + 1);
     elsif nextchar in digits:
       return parse_number(JSON, idx);
    fi;
--        elif nextchar == 'N' and string[idx:idx + 3] == 'NaN':
--            return parse_constant('NaN'), idx + 3
--        elif nextchar == 'I' and string[idx:idx + 8] == 'Infinity':
--            return parse_constant('Infinity'), idx + 8
--        elif nextchar == '-' and string[idx:idx + 9] == '-Infinity':
--            return parse_constant('-Infinity'), idx + 9
--        else:
--            raise StopIteration
  end;

  func Parse(JSON:string; idx:integer=1):Variant;
  var res: Variant[];
    res  = scan(JSON, idx);
    return res[1];
  end;
inobject

end